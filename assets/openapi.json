{
  "openapi": "3.0.3",
  "info": {
    "version": "v3",
    "title": "Templafy Public API",
    "termsOfService": "https://www.templafy.com/templafy-saas-agreement/",
    "description": "Please refer to our [documentation](https://support.templafy.com/hc/en-us/articles/4411351240081-Public-API-Hive-) for guidelines and examples.",
    "contact": {
      "name": "Support",
      "url": "https://support.templafy.com/",
      "email": "support@templafy.com"
    }
  },
  "servers": [
    {
      "url": "https://{tenantId}.api.templafy.com/v3",
      "variables": {
        "tenantId": {
          "default": "",
          "description": "Your Templafy subdomain, i.e., https://{TenantId}.api.templafy.com"
        }
      }
    }
  ],
  "paths": {
    "/spaces": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Lists all existing active spaces.",
        "description": "Returns a list of all active spaces.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Space"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "spaces.read"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/documents/assets/{assetId}/generate": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Generates a document from a template and returns information about the file, which includes the download url.",
        "description": "Creates a file from the template in a docx format. The file will have bindings replaced using various data sources. The url will only be valid for a short amount of time.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the document template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedFile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.generate"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/documents/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Lists all document templates in the folder.",
        "description": "The result does not include document templates from subfolders. When {searchQuery} is used the result includes document templates from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on template name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Uploads the document template.",
        "description": "Only one file can be attached to the request body. The supported file format is .DOCX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if a document with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/documents/assets/{assetId}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns the document template by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the document template to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Documents"
        ],
        "summary": "Updates the document template.",
        "description": "Only one file can be attached to the request body. The supported file format is .DOCX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the document template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a document with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Deletes the document template by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the document template to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/email-elements/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "EmailElements"
        ],
        "summary": "Lists all email elements in the folder.",
        "description": "The result does not include email elements from subfolders.When {searchQuery} is used the result includes email elements from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on email element name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailElement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "EmailElements"
        ],
        "summary": "Uploads the email element file.",
        "description": "Only one file can be attached to the request body. The supported file format is .DOCX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if an email element with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/email-elements/assets/{assetId}": {
      "get": {
        "tags": [
          "EmailElements"
        ],
        "summary": "Returns the email element by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the email element to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailElementDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EmailElements"
        ],
        "summary": "Updates the email element asset.",
        "description": "Only one file can be attached to the request body. The supported file format is .DOCX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the email element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if an email element with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EmailElements"
        ],
        "summary": "Deletes the email element by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the email element to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/{libraryType}/folders/{folderId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Returns the folder by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "libraryType",
            "in": "path",
            "description": "The type of the library you work with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LibraryType"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Updates the folder.",
        "description": "The root folder can not be updated.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "libraryType",
            "in": "path",
            "description": "The type of the library you work with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LibraryType"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The operation cannot be completed due to a conflict with the current state of the folder. This may occur if a folder with the provided name already exists, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Deletes the folder by the identifier",
        "description": "The root folder of the library can not be deleted.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "libraryType",
            "in": "path",
            "description": "The type of the library you work with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LibraryType"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The root folder can not be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/{libraryType}/folders/{folderId}/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Lists all direct folders in the folder. The result does not include subfolders.",
        "description": "The folders from the library can be retrieved by using the root folder identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "libraryType",
            "in": "path",
            "description": "The type of the library you work with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LibraryType"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder which children should be retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Creates a folder inside the specified folder.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "libraryType",
            "in": "path",
            "description": "The type of the library you work with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LibraryType"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the parent folder in which a new folder is created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created folder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The operation cannot be completed due to a conflict with the current state of the folder. This may occur if a folder with the provided name already exists, or if the parent folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/images/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Lists all image assets in the folder.",
        "description": "The result does not include images from subfolders. When {searchQuery} is used the result includes images from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on image name, description, tags and automatic tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads the image file.",
        "description": "Only one file can be attached to the request body. The supported file formats are .JPG/.JPEG, .PNG, .GIF and .SVG",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if an image with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/images/assets/{assetId}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the image to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Images"
        ],
        "summary": "Updates the image asset.",
        "description": "Only one file can be attached to the request body. The supported file formats are .JPG/.JPEG, .PNG, .GIF and .SVG",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the image asset",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "AutomaticTags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Automatic tags are system-generated tags that can only be removed partially or fully. Adding a new tag or changing the existing ones is not allowed."
                  },
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "AutomaticTags": {
                  "style": "form"
                },
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if an image with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the image by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the image to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries": {
      "get": {
        "tags": [
          "Libraries"
        ],
        "summary": "Lists all libraries from all spaces.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Library"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/{libraryType}": {
      "get": {
        "tags": [
          "Libraries"
        ],
        "summary": "Returns the library by the space identifier and library type.",
        "description": "The response has a root folder unique identifier that can be used to request the content of the library.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "libraryType",
            "in": "path",
            "description": "Type of the library to return",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LibraryType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/links/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Lists all link assets in the folder.",
        "description": "The result does not include links from subfolders. When {searchQuery} is used the result includes links from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on link name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Links"
        ],
        "summary": "Creates the link asset.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The creation cannot proceed due to a conflict with the current state of the target location. This may occur if a link with the same name already exists in this location, or if the folder intended for the creation is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/links/assets/{assetId}": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Returns the link asset by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the link to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Links"
        ],
        "summary": "Updates the link asset.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the link asset",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLinkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLinkRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a link with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Links"
        ],
        "summary": "Deletes the link by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the link to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/pdfs/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Pdfs"
        ],
        "summary": "Lists all pdf assets in the folder.",
        "description": "The result does not include pdfs from subfolders. When {searchQuery} is used the result includes pdfs from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on pdf name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pdf"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Pdfs"
        ],
        "summary": "Uploads the pdf file.",
        "description": "Only one file can be attached to the request body. The supported file format is .PDF",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if a pdf with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/pdfs/assets/{assetId}": {
      "get": {
        "tags": [
          "Pdfs"
        ],
        "summary": "Returns the pdf by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the pdf to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pdfs"
        ],
        "summary": "Updates the pdf asset.",
        "description": "Only one file can be attached to the request body. The supported file format is .PDF",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the pdf asset",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a pdf with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Pdfs"
        ],
        "summary": "Deletes the pdf by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the pdf to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/presentations/assets/{assetId}/generate": {
      "post": {
        "tags": [
          "Presentations"
        ],
        "summary": "Generates a presentation from a template and returns information about the file, which includes the download url.",
        "description": "Creates a file from the template in a pptx format. The file will have bindings replaced using various data sources. The url will only be valid for a short amount of time.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the presentation template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedFile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.generate"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/presentations/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Presentations"
        ],
        "summary": "Lists all presentation templates along with their slides in the folder.",
        "description": "The result does not include presentation templates or slides from subfolders. When {searchQuery} is used the result includes presentation templates/slides from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on presentation template/slide name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Presentation"
                      },
                      {
                        "$ref": "#/components/schemas/PresentationSlide"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Presentations"
        ],
        "summary": "Uploads the presentation template.",
        "description": "Only one file can be attached to the request body. The supported file format is .PPTX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if a presentation with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/presentations/assets/{assetId}": {
      "get": {
        "tags": [
          "Presentations"
        ],
        "summary": "Returns the presentation template or presentation slide by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the presentation template or slide to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PresentationDetails"
                    },
                    {
                      "$ref": "#/components/schemas/PresentationSlideDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Presentations"
        ],
        "summary": "Updates the presentation template.",
        "description": "Only one file can be attached to the request body. The supported file format is .PPTX. Slides are limited to the following properties that can be updated: Name, Tags, ExternalData",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the presentation template or slide",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a presentation with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Presentations"
        ],
        "summary": "Deletes the presentation template by the identifier.",
        "description": "Slides can only be deleted along with the presentation.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the presentation to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/slide-elements/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "SlideElements"
        ],
        "summary": "Lists all slide element decks along with slide elements in the folder.",
        "description": "The result does not include slide element decks or slide elements from subfolders. When {searchQuery} is used the result includes decks/slide elements from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on slide element deck/slide element name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/SlideElement"
                      },
                      {
                        "$ref": "#/components/schemas/SlideElementDeck"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SlideElements"
        ],
        "summary": "Uploads the slide element file.",
        "description": "Only one file can be attached to the request body. The supported file format is .PPTX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if a slide element deck with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/slide-elements/assets/{assetId}": {
      "get": {
        "tags": [
          "SlideElements"
        ],
        "summary": "Returns the slide element deck or slide element by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the slide element deck or slide element to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SlideElementDeckDetails"
                    },
                    {
                      "$ref": "#/components/schemas/SlideElementDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "SlideElements"
        ],
        "summary": "Updates the slide element asset.",
        "description": "Only one file can be attached to the request body. The supported file format is .PPTX. Slide elements are limited to the following properties that can be updated: Name, Tags, ExternalData",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the slide element deck or slide element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a slide element with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SlideElements"
        ],
        "summary": "Deletes the slide element deck by the identifier.",
        "description": "Slide elements can only be deleted along with the slide element deck.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the slide element deck to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/slides/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Slides"
        ],
        "summary": "Lists all slide decks along with slides in the folder.",
        "description": "The result does not include slide decks or slides from subfolders. When {searchQuery} is used the result includes decks/slides from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on slide deck/slide name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Slide"
                      },
                      {
                        "$ref": "#/components/schemas/SlideDeck"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Slides"
        ],
        "summary": "Uploads the slide file.",
        "description": "Only one file can be attached to the request body. The supported file format is .PPTX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if a slide deck with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/slides/assets/{assetId}": {
      "get": {
        "tags": [
          "Slides"
        ],
        "summary": "Returns the slide deck or slide by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the slide deck or slide to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SlideDeckDetails"
                    },
                    {
                      "$ref": "#/components/schemas/SlideDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Slides"
        ],
        "summary": "Updates the slide asset.",
        "description": "Only one file can be attached to the request body. The supported file format is .PPTX. Slides are limited to the following properties that can be updated: Name, Tags, ExternalData",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the slide deck or slide",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a slide with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Slides"
        ],
        "summary": "Deletes the slide deck by the identifier.",
        "description": "Slides can only be deleted along with the slide deck.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the slide deck to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/spreadsheets/assets/{assetId}/generate": {
      "post": {
        "tags": [
          "Spreadsheets"
        ],
        "summary": "Generates a spreadsheet from a template and returns information about the file, which includes the download url.",
        "description": "Creates a file from the template in a xlsx format. The file will have bindings replaced using various data sources. The url will only be valid for a short amount of time.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the spreadsheet template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedFile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.generate"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/spreadsheets/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "Spreadsheets"
        ],
        "summary": "Lists all spreadsheet templates in the folder.",
        "description": "The result does not include spreadsheet templates from subfolders. When {searchQuery} is used the result includes spreadsheet templates from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on template name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Spreadsheet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Spreadsheets"
        ],
        "summary": "Uploads the spreadsheet template.",
        "description": "Only one file can be attached to the request body. The supported file formats are .XLSX and .XLSM for macro-enabled spreadsheets.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if spreadsheet with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/spreadsheets/assets/{assetId}": {
      "get": {
        "tags": [
          "Spreadsheets"
        ],
        "summary": "Returns the spreadsheet template by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the spreadsheet template to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpreadsheetDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Spreadsheets"
        ],
        "summary": "Updates the spreadsheet template.",
        "description": "Only one file can be attached to the request body. The supported file formats are .XLSX and .XLSM for macro-enabled spreadsheets.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the spreadsheet template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a spreadsheet with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Spreadsheets"
        ],
        "summary": "Deletes the spreadsheet template by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the spreadsheet template to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/text-elements/assets/{assetId}/generate": {
      "post": {
        "tags": [
          "TextElements"
        ],
        "summary": "Generates a text element from a template and returns information about the file, which includes the download url.",
        "description": "Creates a file from the template in a docx format. The file will have bindings replaced using various data sources. The url will only be valid for a short amount of time.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the text element template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTextElementFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedTextElementFile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.generate"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/text-elements/folders/{folderId}/assets": {
      "get": {
        "tags": [
          "TextElements"
        ],
        "summary": "Lists all text elements in the folder.",
        "description": "The result does not include text elements from subfolders.When {searchQuery} is used the result includes text elements from subfolders. The search mode enables pagination with 1000 page size maximum.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filter on text element name, description and tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number from the result set. Page number is set to 1 by default if {searchQuery} is passed. A value passed only for the page number and not for the page size is ignored.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of the returned page. If {searchQuery} is not set, not passing page size or having it 0 returns all the assets from the folder. Acceptable values are 0 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextElement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "TextElements"
        ],
        "summary": "Uploads the text element file.",
        "description": "Only one file can be attached to the request body. The supported file format is .DOCX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "The identifier of the folder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  },
                  "Name": {
                    "type": "string",
                    "description": "The name is inferred from the file name by default. It can be overridden by providing a different value with this field"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identifier of the created asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The upload cannot proceed due to a conflict with the current state of the target location. This may occur if a text element with the same name already exists in this location, or if the folder intended for the upload is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/libraries/{spaceId}/text-elements/assets/{assetId}": {
      "get": {
        "tags": [
          "TextElements"
        ],
        "summary": "Returns the text element by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the text element to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextElementDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.read",
              "library.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "TextElements"
        ],
        "summary": "Updates the text element asset.",
        "description": "Only one file can be attached to the request body. The supported file format is .DOCX",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the text element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FolderId": {
                    "type": "integer",
                    "description": "The identifier of the destination folder",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "description": "A new display name of the asset"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description is used to specify the intended usage of the asset"
                  },
                  "Tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags should describe the content of the asset making it easier for a user to locate it"
                  },
                  "ExternalData": {
                    "type": "string",
                    "description": "External data which can be attached for future reference"
                  },
                  "File": {
                    "type": "string",
                    "description": "A file to be uploaded. The maximum file size is 50 mb",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "FolderId": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Tags": {
                  "style": "form"
                },
                "ExternalData": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The update operation cannot be completed due to a conflict with the current state of the target location. This may occur if a text element with the same name already exists in the destination, or if the destination folder is in the process of being deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "TextElements"
        ],
        "summary": "Deletes the text element by the identifier.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The identifier of the space",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The identifier of the text element to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "library.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources/{dataSourceId}/fields/{fieldId}": {
      "get": {
        "tags": [
          "DataSourceFields"
        ],
        "summary": "Gets an existing data source field.",
        "description": "Returns a data source field that represents the schema of a single field of a data source.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The identifier of the field on the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TextFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/NumberFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/ReferenceFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/ImageFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/LanguageFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/FontFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/ColorThemeFieldSchema"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.read",
              "datasources.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DataSourceFields"
        ],
        "summary": "Updates an existing data source field.",
        "description": "This is a PATCH operation. Any fields not included in the request will remain unchanged on the server.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The identifier of the field on the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceFieldRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceFieldRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceFieldRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceFieldRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataSourceFields"
        ],
        "summary": "Deletes a data source field.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The identifier of the field on the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "423": {
            "description": "Delete will fail for data source fields with hard dependencies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceObjectLockedProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources/{dataSourceId}/fields": {
      "post": {
        "tags": [
          "DataSourceFields"
        ],
        "summary": "Creates a new data source field.",
        "description": "Extends a data source by adding a new field.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source to extend",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateTextFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateNumberFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateImageFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateReferenceFieldSchemaRequest"
                  }
                ],
                "example": {
                  "name": "History",
                  "type": "text",
                  "isMultipleLines": true,
                  "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
                  "isRequired": false
                }
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateTextFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateNumberFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateImageFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateReferenceFieldSchemaRequest"
                  }
                ],
                "example": {
                  "name": "History",
                  "type": "text",
                  "isMultipleLines": true,
                  "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
                  "isRequired": false
                }
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateTextFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateNumberFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateImageFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateReferenceFieldSchemaRequest"
                  }
                ],
                "example": {
                  "name": "History",
                  "type": "text",
                  "isMultipleLines": true,
                  "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
                  "isRequired": false
                }
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateTextFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateNumberFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateImageFieldSchemaRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateReferenceFieldSchemaRequest"
                  }
                ],
                "example": {
                  "name": "History",
                  "type": "text",
                  "isMultipleLines": true,
                  "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
                  "isRequired": false
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Responds with the new data source field's URL in the Location header and its details in the body.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TextFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/NumberFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/ReferenceFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/ImageFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/LanguageFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/FontFieldSchema"
                    },
                    {
                      "$ref": "#/components/schemas/ColorThemeFieldSchema"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources/{dataSourceId}/items/{itemId}/fields/{fieldId}": {
      "put": {
        "tags": [
          "DataSourceItemFields"
        ],
        "summary": "Updates a single field on a data source item.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The identifier of the data source item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The identifier of the data source item field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTextDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateNumberDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateColorThemeDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateReferenceDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateImageDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateFontDataSourceItemFieldRequest"
                  }
                ],
                "example": {
                  "type": "text",
                  "value": "An updated value"
                }
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTextDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateNumberDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateColorThemeDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateReferenceDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateImageDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateFontDataSourceItemFieldRequest"
                  }
                ],
                "example": {
                  "type": "text",
                  "value": "An updated value"
                }
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTextDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateNumberDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateColorThemeDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateReferenceDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateImageDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateFontDataSourceItemFieldRequest"
                  }
                ],
                "example": {
                  "type": "text",
                  "value": "An updated value"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTextDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateNumberDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateColorThemeDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateReferenceDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateImageDataSourceItemFieldRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateFontDataSourceItemFieldRequest"
                  }
                ],
                "example": {
                  "type": "text",
                  "value": "An updated value"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataSourceItemFields"
        ],
        "summary": "Deletes an existing field from a data source item.",
        "description": "Deletes an existing field from the specified data source item contained in the specified data source.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The identifier of the data source item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The identifier of the data source item field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources/{dataSourceId}/items": {
      "get": {
        "tags": [
          "DataSourceItems"
        ],
        "summary": "Lists all existing data source items.",
        "description": "Returns a list of all data source items contained within a data source. Results are paged, starting at page 1.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to fetch. Acceptable values are 1 to 65535, inclusive.",
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of a page. Acceptable values are 1 to 1000, inclusive.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.read",
              "datasources.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DataSourceItems"
        ],
        "summary": "Creates a new data source item.",
        "description": "Creates a new data source item in the specified data source.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceItemRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceItemRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceItemRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Responds with the new data source item's URL in the Location header and its details in the body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources/{dataSourceId}/items/{itemId}": {
      "get": {
        "tags": [
          "DataSourceItems"
        ],
        "summary": "Gets an existing data source item.",
        "description": "Returns a single data source item from the specified data source.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The identifier of the data source item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.read",
              "datasources.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DataSourceItems"
        ],
        "summary": "Updates data source item.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The identifier of the data source item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceItemRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceItemRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceItemRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataSourceItemRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataSourceItems"
        ],
        "summary": "Deletes an existing data source item.",
        "description": "Deletes an existing data source item from the specified data source.",
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The identifier of the data source item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "423": {
            "description": "Delete will fail for data sources with hard dependencies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceObjectLockedProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources": {
      "get": {
        "tags": [
          "DataSources"
        ],
        "summary": "Lists all existing data sources.",
        "description": "Returns a list of all data sources and the schema of their fields.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.read",
              "datasources.readwrite"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DataSources"
        ],
        "summary": "Creates a new data source.",
        "description": "Creates a new data source to contain data source items to represent your data.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Responds with the new data source's URL in the Location header and its details in the body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    },
    "/data-sources/{id}": {
      "get": {
        "tags": [
          "DataSources"
        ],
        "summary": "Gets an existing data source.",
        "description": "Returns a single data source and the schema of its fields.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.read",
              "datasources.readwrite"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DataSources"
        ],
        "summary": "Updates an existing data source.",
        "description": "This is a PATCH operation. Any fields not included in the request will remain unchanged on the server.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataSourceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataSourceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataSourceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataSources"
        ],
        "summary": "Deletes an existing data source.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the data source",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundProblemDetails"
                }
              }
            }
          },
          "423": {
            "description": "Delete will fail for data source with hard dependencies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceObjectLockedProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "datasources.readwrite"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Space": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique Space identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Space name"
          }
        },
        "additionalProperties": false,
        "example": {
          "id": 541244332157142140,
          "name": "Global Brand"
        }
      },
      "AssetFileStateWithPreviews": {
        "enum": [
          "ready",
          "processing",
          "processingFailed",
          "generatingPreviews",
          "generatingPreviewsFailed",
          "deleting"
        ],
        "type": "string",
        "description": "The current state of the asset"
      },
      "AssetFileStateWithoutPreviews": {
        "enum": [
          "ready",
          "processing",
          "processingFailed",
          "deleting"
        ],
        "type": "string",
        "description": "The current state of the asset"
      },
      "AssetStateWithoutFile": {
        "enum": [
          "ready"
        ],
        "type": "string",
        "description": "The current state of the asset"
      },
      "ConflictProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "title": "Conflict",
          "detail": "The request could not be completed due to a conflict with the current state of the resource.",
          "status": 409,
          "traceId": "d61f7ce-cccb-4e5b-8727-3b68a61a0559"
        }
      },
      "CreateFolderRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          }
        },
        "additionalProperties": false,
        "description": "The request model to create a folder"
      },
      "CreateLinkRequest": {
        "required": [
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string",
            "description": "Describing intended usage of the asset",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "maxLength": 1024,
              "minLength": 2,
              "type": "string"
            },
            "description": "Tags should describe the content of the asset making it easier for a user to locate it",
            "nullable": true
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "description": "A reference to the web resource. HTTP and HTTPS are supported"
          }
        },
        "additionalProperties": false,
        "description": "The request model to create a link asset"
      },
      "Dimensions": {
        "required": [
          "height",
          "width"
        ],
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height of the asset in pixels",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "Width of the asset in pixels",
            "format": "int32"
          },
          "aspectRatio": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Asset dimensions"
      },
      "Document": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a document. E.g. \"folder-a/folder-b/_my-document\" when the location is \"Folder A > Folder B > My Document\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "DocumentDetails": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a document. E.g. \"folder-a/folder-b/_my-document\" when the location is \"Folder A > Folder B > My Document\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "EmailElement": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a email element. E.g. \"folder-a/folder-b/_my-email-element\" when the location is \"Folder A > Folder B > My Email Element\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "EmailElementDetails": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a email element. E.g. \"folder-a/folder-b/_my-email-element\" when the location is \"Folder A > Folder B > My Email Element\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "Folder": {
        "required": [
          "id",
          "libraryId",
          "modifiedAt",
          "name",
          "navigationPath",
          "state"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "libraryId": {
            "type": "integer",
            "description": "Unique library identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "parentId": {
            "type": "integer",
            "description": "Unique identifier for the parent folder. The root folder does not have a parent folder identifier",
            "format": "int64",
            "nullable": true
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a folder. E.g. \"folder-a/folder-b\" when the location is \"Folder A > Folder B\""
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the folder was last modified"
          },
          "state": {
            "$ref": "#/components/schemas/FolderState"
          }
        },
        "additionalProperties": false
      },
      "FolderDetails": {
        "required": [
          "id",
          "libraryId",
          "modifiedAt",
          "name",
          "navigationPath",
          "state"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "libraryId": {
            "type": "integer",
            "description": "Unique library identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "parentId": {
            "type": "integer",
            "description": "Unique identifier for the parent folder. The root folder does not have a parent folder identifier",
            "format": "int64",
            "nullable": true
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a folder. E.g. \"folder-a/folder-b\" when the location is \"Folder A > Folder B\""
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the folder was last modified"
          },
          "state": {
            "$ref": "#/components/schemas/FolderState"
          }
        },
        "additionalProperties": false
      },
      "FolderState": {
        "enum": [
          "ready",
          "deleting"
        ],
        "type": "string",
        "description": "The current state of the folder"
      },
      "GenerateFileRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Email to be used for identification.",
            "format": "email"
          },
          "data": {
            "description": "Data to be used during the file generation.",
            "nullable": true
          },
          "includePdf": {
            "type": "boolean",
            "description": "Specifies whether a PDF export of the file should be included in the response."
          }
        },
        "additionalProperties": false,
        "description": "The request model to generate a file.",
        "example": {
          "email": "templafy@templafy.com",
          "data": {
            "Language": "en-us"
          },
          "includePdf": true
        }
      },
      "GenerateTextElementFileRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Email to be used for identification.",
            "format": "email"
          },
          "data": {
            "description": "Data to be used during the file generation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request model to generate a text element file.",
        "example": {
          "email": "templafy@templafy.com",
          "data": {
            "Language": "en-us"
          }
        }
      },
      "GeneratedFile": {
        "required": [
          "checksum",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "mimeType"
        ],
        "type": "object",
        "properties": {
          "downloadUrl": {
            "minLength": 1,
            "type": "string",
            "description": "Temporary access URL for generated file.",
            "format": "uri"
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes.",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes."
          },
          "mimeType": {
            "minLength": 1,
            "type": "string",
            "description": "Mime type of the generated file."
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file."
          },
          "pdfDownloadUrl": {
            "type": "string",
            "description": "Temporary access URL for generated PDF file. Only available if the file was converted to PDF.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The generated file response model."
      },
      "GeneratedTextElementFile": {
        "required": [
          "checksum",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "mimeType"
        ],
        "type": "object",
        "properties": {
          "downloadUrl": {
            "minLength": 1,
            "type": "string",
            "description": "Temporary access URL for generated file.",
            "format": "uri"
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes.",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes."
          },
          "mimeType": {
            "minLength": 1,
            "type": "string",
            "description": "Mime type of the generated file."
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file."
          }
        },
        "additionalProperties": false,
        "description": "The generated text element file response model."
      },
      "Image": {
        "required": [
          "assetState",
          "automaticTags",
          "checksum",
          "description",
          "dimensions",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "mimeType",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the image with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the image with the maximum width 1500px",
            "nullable": true
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "mimeType": {
            "minLength": 1,
            "type": "string"
          },
          "automaticTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags that are automatically generated based on the image"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of an image. E.g. \"folder-a/folder-b/_my-image\" when the location is \"Folder A > Folder B > My Image\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          }
        },
        "additionalProperties": false
      },
      "ImageDetails": {
        "required": [
          "assetState",
          "automaticTags",
          "checksum",
          "description",
          "dimensions",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "mimeType",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the image with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the image with the maximum width 1500px",
            "nullable": true
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "mimeType": {
            "minLength": 1,
            "type": "string"
          },
          "automaticTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags that are automatically generated based on the image"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of an image. E.g. \"folder-a/folder-b/_my-image\" when the location is \"Folder A > Folder B > My Image\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          }
        },
        "additionalProperties": false
      },
      "Library": {
        "required": [
          "id",
          "libraryType",
          "name",
          "rootFolderId",
          "spaceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique library identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Display name of the library"
          },
          "libraryType": {
            "$ref": "#/components/schemas/LibraryType"
          },
          "spaceId": {
            "type": "integer",
            "description": "Unique identifier of the space to which the library belongs",
            "format": "int64"
          },
          "rootFolderId": {
            "type": "integer",
            "description": "Unique identifier of the root folder of the library",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "LibraryDetails": {
        "required": [
          "id",
          "libraryType",
          "name",
          "rootFolderId",
          "spaceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique library identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Display name of the library"
          },
          "libraryType": {
            "$ref": "#/components/schemas/LibraryType"
          },
          "spaceId": {
            "type": "integer",
            "description": "Unique identifier of the space to which the library belongs",
            "format": "int64"
          },
          "rootFolderId": {
            "type": "integer",
            "description": "Unique identifier of the root folder of the library",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "LibraryType": {
        "enum": [
          "documents",
          "presentations",
          "spreadsheets",
          "slides",
          "slide-elements",
          "text-elements",
          "images",
          "pdfs",
          "links",
          "email-elements"
        ],
        "type": "string",
        "description": "Type of the assets that can be stored in the library"
      },
      "Link": {
        "required": [
          "assetState",
          "description",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a link. E.g. \"folder-a/folder-b/_my-link\" when the location is \"Folder A > Folder B > My Link\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetStateWithoutFile"
          }
        },
        "additionalProperties": false
      },
      "LinkDetails": {
        "required": [
          "assetState",
          "description",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a link. E.g. \"folder-a/folder-b/_my-link\" when the location is \"Folder A > Folder B > My Link\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetStateWithoutFile"
          }
        },
        "additionalProperties": false
      },
      "NotFoundProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "title": "NotFound",
          "detail": "The server can not find the requested resource.",
          "status": 404,
          "traceId": "d61f7ce-cccb-4e5b-8727-3b68a61a0559"
        }
      },
      "Pdf": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a pdf. E.g. \"folder-a/folder-b/_my-pdf\" when the location is \"Folder A > Folder B > My Pdf\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "PdfDetails": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a pdf. E.g. \"folder-a/folder-b/_my-pdf\" when the location is \"Folder A > Folder B > My Pdf\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "Presentation": {
        "required": [
          "assetType",
          "description"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always Presentation for this schema"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PresentationBase": {
        "required": [
          "assetState",
          "assetType",
          "checksum",
          "dimensions",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a presentation. E.g. \"folder-a/folder-b/_my-presentation\" when the location is \"Folder A > Folder B > My Presentation\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 1500px",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PresentationDetails": {
        "required": [
          "assetType",
          "childrenAssetIds",
          "description",
          "downloadUrl"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationDetailsBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always Presentation for this schema"
          },
          "childrenAssetIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The array of the identifiers of slides included in the presentation"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "PresentationDetailsBase": {
        "required": [
          "assetState",
          "assetType",
          "checksum",
          "dimensions",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a presentation. E.g. \"folder-a/folder-b/_my-presentation\" when the location is \"Folder A > Folder B > My Presentation\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 1500px",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PresentationSlide": {
        "required": [
          "assetType",
          "presentationId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always Slide for this schema"
          },
          "presentationId": {
            "type": "integer",
            "description": "The identifier of the presentation to which a slide belongs",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "PresentationSlideDetails": {
        "required": [
          "assetType",
          "presentationId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationDetailsBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always Slide for this schema"
          },
          "presentationId": {
            "type": "integer",
            "description": "The identifier of the presentation to which a slide belongs",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Slide": {
        "required": [
          "assetType",
          "slideDeckId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always Slide for this schema"
          },
          "slideDeckId": {
            "type": "integer",
            "description": "The identifier of the slide deck to which a slide belongs",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SlideBase": {
        "required": [
          "assetState",
          "assetType",
          "checksum",
          "dimensions",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a slide. E.g. \"folder-a/folder-b/_my-slide\" when the location is \"Folder A > Folder B > My Slide\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 1500px",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SlideDeck": {
        "required": [
          "assetType",
          "description"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always SlideDeck for this schema"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SlideDeckDetails": {
        "required": [
          "assetType",
          "childrenAssetIds",
          "description",
          "downloadUrl"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideDetailsBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always SlideDeck for this schema"
          },
          "childrenAssetIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The array of the identifiers of slides included in the slide deck"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "SlideDetails": {
        "required": [
          "assetType",
          "slideDeckId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideDetailsBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always Slide for this schema"
          },
          "slideDeckId": {
            "type": "integer",
            "description": "The identifier of the slide deck to which a slide belongs",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SlideDetailsBase": {
        "required": [
          "assetState",
          "assetType",
          "checksum",
          "dimensions",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a slide. E.g. \"folder-a/folder-b/_my-slide\" when the location is \"Folder A > Folder B > My Slide\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 1500px",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SlideElement": {
        "required": [
          "assetType",
          "slideElementDeckId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideElementBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always SlideElement for this schema"
          },
          "slideElementDeckId": {
            "type": "integer",
            "description": "The identifier of the slide element deck to which a slide element belongs",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SlideElementBase": {
        "required": [
          "assetState",
          "assetType",
          "checksum",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          },
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a slide element. E.g. \"folder-a/folder-b/_my-slide-element\" when the location is \"Folder A > Folder B > My Slide Element\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 1500px",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SlideElementDeck": {
        "required": [
          "assetType",
          "description"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideElementBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always SlideElementDeck for this schema"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SlideElementDeckDetails": {
        "required": [
          "assetType",
          "childrenAssetIds",
          "description",
          "downloadUrl"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideElementDetailsBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always SlideElementDeck for this schema"
          },
          "childrenAssetIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The array of the identifiers of slide elements included in the slide element deck"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "SlideElementDetails": {
        "required": [
          "assetType",
          "slideElementDeckId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlideElementDetailsBase"
          }
        ],
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of the asset. It is always SlideElement for this schema"
          },
          "slideElementDeckId": {
            "type": "integer",
            "description": "The identifier of the slide element deck to which a slide element belongs",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SlideElementDetailsBase": {
        "required": [
          "assetState",
          "assetType",
          "checksum",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "minLength": 1,
            "type": "string"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithPreviews"
          },
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a slide element. E.g. \"folder-a/folder-b/_my-slide-element\" when the location is \"Folder A > Folder B > My Slide Element\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "smallPreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 400px",
            "nullable": true
          },
          "largePreviewLink": {
            "type": "string",
            "description": "Link to the asset with the maximum width 1500px",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Spreadsheet": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a spreadsheet. E.g. \"folder-a/folder-b/_my-spreadsheet\" when the location is \"Folder A > Folder B > My Spreadsheet\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "SpreadsheetDetails": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a spreadsheet. E.g. \"folder-a/folder-b/_my-spreadsheet\" when the location is \"Folder A > Folder B > My Spreadsheet\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "TextElement": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a text element. E.g. \"folder-a/folder-b/_my-text-element\" when the location is \"Folder A > Folder B > My Text Element\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "TextElementDetails": {
        "required": [
          "assetState",
          "checksum",
          "description",
          "downloadUrl",
          "fileExtension",
          "fileSize",
          "folderId",
          "id",
          "modifiedAt",
          "name",
          "navigationPath",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique asset identifier",
            "format": "int64"
          },
          "folderId": {
            "type": "integer",
            "description": "Unique folder identifier",
            "format": "int64"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "maxLength": 250,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "checksum": {
            "minLength": 1,
            "type": "string",
            "description": "MD5 checksum of the bytes"
          },
          "fileExtension": {
            "minLength": 1,
            "type": "string",
            "description": "Suffix to the name of the file"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Generated temporary access URL for content downloading with 302 response code",
            "format": "uri"
          },
          "navigationPath": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "Hierarchical path in lowercase based on the location of a text element. E.g. \"folder-a/folder-b/_my-text-element\" when the location is \"Folder A > Folder B > My Text Element\""
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          },
          "modifiedAt": {
            "minLength": 1,
            "type": "string",
            "description": "Date and time in ISO 8601 format of when the asset was last modified"
          },
          "assetState": {
            "$ref": "#/components/schemas/AssetFileStateWithoutPreviews"
          }
        },
        "additionalProperties": false
      },
      "UpdateFolderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "parentFolderId": {
            "type": "integer",
            "description": "The identifier of a folder that current folder should be moved to",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request model to update the folder"
      },
      "UpdateLinkRequest": {
        "type": "object",
        "properties": {
          "folderId": {
            "type": "integer",
            "description": "The identifier of the destination folder",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "A new display name of the asset",
            "nullable": true
          },
          "description": {
            "maxLength": 250,
            "type": "string",
            "description": "Description is used to specify the intended usage of the asset",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "maxLength": 1024,
              "minLength": 2,
              "type": "string"
            },
            "description": "Tags should describe the content of the asset making it easier for a user to locate it",
            "nullable": true
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "description": "A reference to the web resource. HTTP and HTTPS are supported",
            "nullable": true
          },
          "externalData": {
            "maxLength": 100,
            "type": "string",
            "description": "External data which can be attached for future reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "errors": [
            {
              "name": "The name field is required"
            },
            {
              "data": "The input was invalid"
            }
          ],
          "title": "One or more validation errors occurred.",
          "status": 400,
          "traceId": "d61f7ce-cccb-4e5b-8727-3b68a61a0559"
        }
      },
      "ColorThemeFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 6,
          "name": "PreferredColourTheme",
          "type": "colorTheme",
          "isRequired": false,
          "isLocked": false
        }
      },
      "CreateColorThemeDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "xmlValue"
            ],
            "type": "object",
            "properties": {
              "xmlValue": {
                "maxLength": 3500,
                "minLength": 1,
                "type": "string",
                "description": "The value of the field based on the schema http://schemas.openxmlformats.org/drawingml/2006/main. Max length is 3500 characters."
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "colorTheme",
          "dataSourceFieldId": 5,
          "xmlValue": "<a:clrScheme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Templafy_New\"><a:dk1><a:srgbClr val=\"0078FF\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"000000\"/></a:dk2><a:lt2><a:srgbClr val=\"E5E5E5\"/></a:lt2><a:accent1><a:srgbClr val=\"0078FF\"/></a:accent1><a:accent2><a:srgbClr val=\"575757\"/></a:accent2><a:accent3><a:srgbClr val=\"12AA96\"/></a:accent3><a:accent4><a:srgbClr val=\"15436B\"/></a:accent4><a:accent5><a:srgbClr val=\"D44849\"/></a:accent5><a:accent6><a:srgbClr val=\"7F7F7F\"/></a:accent6><a:hlink><a:srgbClr val=\"0078FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"55CBFF\"/></a:folHlink></a:clrScheme>"
        }
      },
      "CreateDataSourceFieldSchemaRequest": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Data source field schema type."
          },
          "name": {
            "minLength": 1,
            "pattern": "^[A-Z][a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "The name of the field. It must be unique within the data source."
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether the field is required. If true, the field must be filled in when creating a data source item."
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Text": "#/components/schemas/CreateTextFieldSchemaRequest",
            "Number": "#/components/schemas/CreateNumberFieldSchemaRequest",
            "Image": "#/components/schemas/CreateImageFieldSchemaRequest",
            "Reference": "#/components/schemas/CreateReferenceFieldSchemaRequest"
          }
        },
        "example": {
          "name": "History",
          "type": "text",
          "isMultipleLines": true,
          "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
          "isRequired": false
        }
      },
      "CreateDataSourceItemFieldRequest": {
        "required": [
          "dataSourceFieldId",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Data source item field type.",
            "readOnly": true
          },
          "dataSourceFieldId": {
            "type": "integer",
            "description": "Data source field identifier.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Text": "#/components/schemas/CreateTextDataSourceItemFieldRequest",
            "Number": "#/components/schemas/CreateNumberDataSourceItemFieldRequest",
            "Reference": "#/components/schemas/CreateReferenceDataSourceItemFieldRequest",
            "Image": "#/components/schemas/CreateImageDataSourceItemFieldRequest",
            "Font": "#/components/schemas/CreateFontDataSourceItemFieldRequest",
            "ColorTheme": "#/components/schemas/CreateColorThemeDataSourceItemFieldRequest"
          }
        }
      },
      "CreateDataSourceItemRequest": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTextDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateNumberDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateReferenceDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateImageDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateFontDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateColorThemeDataSourceItemFieldRequest"
                }
              ]
            },
            "description": "The fields of the data source item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "fields": [
            {
              "dataSourceFieldId": 0,
              "type": "text",
              "value": "Sample text"
            },
            {
              "dataSourceFieldId": 1,
              "type": "number",
              "value": 123.45
            },
            {
              "dataSourceFieldId": 2,
              "type": "reference",
              "dataSourceItemId": "638247997437572264"
            },
            {
              "dataSourceFieldId": 3,
              "type": "image",
              "fileName": "Cat",
              "fileUrl": "https://en.wikipedia.org/wiki/Cat#/media/File:Cat_August_2010-4.jpg"
            },
            {
              "dataSourceFieldId": 4,
              "type": "font",
              "fileName": "best-font",
              "fileUrl": "https://allfonts.com/best-font"
            },
            {
              "dataSourceFieldId": 5,
              "type": "colorTheme",
              "xmlValue": "<a:clrScheme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Templafy_New\"><a:dk1><a:srgbClr val=\"0078FF\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"000000\"/></a:dk2><a:lt2><a:srgbClr val=\"E5E5E5\"/></a:lt2><a:accent1><a:srgbClr val=\"0078FF\"/></a:accent1><a:accent2><a:srgbClr val=\"575757\"/></a:accent2><a:accent3><a:srgbClr val=\"12AA96\"/></a:accent3><a:accent4><a:srgbClr val=\"15436B\"/></a:accent4><a:accent5><a:srgbClr val=\"D44849\"/></a:accent5><a:accent6><a:srgbClr val=\"7F7F7F\"/></a:accent6><a:hlink><a:srgbClr val=\"0078FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"55CBFF\"/></a:folHlink></a:clrScheme>"
            }
          ]
        }
      },
      "CreateDataSourceRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[A-Z][a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "The name of the data source. It must be unique. Max length is 100 characters."
          },
          "description": {
            "type": "string",
            "description": "The description of the data source.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTextFieldSchemaRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateNumberFieldSchemaRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateImageFieldSchemaRequest"
                },
                {
                  "$ref": "#/components/schemas/CreateReferenceFieldSchemaRequest"
                }
              ],
              "example": {
                "name": "History",
                "type": "text",
                "isMultipleLines": true,
                "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
                "isRequired": false
              }
            },
            "description": "The fields of the data source. If not specified, the data source will be created without fields.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "name": "Cities",
          "description": "Cities in which we have offices",
          "fields": [
            {
              "name": "History",
              "type": "text",
              "isMultipleLines": true,
              "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
              "isRequired": false
            },
            {
              "name": "Population",
              "type": "number",
              "defaultValue": 100222,
              "isRequired": true
            },
            {
              "name": "Country",
              "type": "reference",
              "referenceDataSourceId": "637989101951089955",
              "defaultReferencedItemId": "638249311425155568",
              "isRequired": true
            },
            {
              "name": "Flag",
              "type": "image",
              "isRequired": true
            }
          ]
        }
      },
      "CreateFontDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "fileName"
            ],
            "type": "object",
            "properties": {
              "fileName": {
                "minLength": 1,
                "type": "string",
                "description": "The name of the file."
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "format": "uri",
                "nullable": true
              },
              "content": {
                "type": "string",
                "description": "The base64 content size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "font",
          "dataSourceFieldId": 4,
          "fileName": "best-font",
          "fileUrl": "https://allfonts.com/best-font"
        }
      },
      "CreateImageDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "fileName"
            ],
            "type": "object",
            "properties": {
              "fileName": {
                "minLength": 1,
                "type": "string",
                "description": "The name of the file."
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "format": "uri",
                "nullable": true
              },
              "content": {
                "type": "string",
                "description": "The base64 content size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "image",
          "dataSourceFieldId": 3,
          "fileName": "Cat",
          "fileUrl": "https://en.wikipedia.org/wiki/Cat#/media/File:Cat_August_2010-4.jpg"
        }
      },
      "CreateImageFieldSchemaRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceFieldSchemaRequest"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "example": {
          "name": "Flag",
          "type": "image",
          "isRequired": true
        }
      },
      "CreateNumberDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value of the field with the precision of 2 decimal places.",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "number",
          "dataSourceFieldId": 1,
          "value": 123.45
        }
      },
      "CreateNumberFieldSchemaRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceFieldSchemaRequest"
          },
          {
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "number",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "format": "double",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "name": "Population",
          "type": "number",
          "defaultValue": 100222,
          "isRequired": true
        }
      },
      "CreateReferenceDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "dataSourceItemId"
            ],
            "type": "object",
            "properties": {
              "dataSourceItemId": {
                "type": "integer",
                "description": "The identifier of the data source item to be referenced.",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 2,
          "type": "reference",
          "dataSourceItemId": "638247997437572264"
        }
      },
      "CreateReferenceFieldSchemaRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceFieldSchemaRequest"
          },
          {
            "required": [
              "referenceDataSourceId"
            ],
            "type": "object",
            "properties": {
              "referenceDataSourceId": {
                "type": "integer",
                "description": "The id of the data source that the field references.",
                "format": "int64"
              },
              "defaultReferencedItemId": {
                "type": "integer",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "format": "int64",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "name": "Country",
          "type": "reference",
          "referenceDataSourceId": "637989101951089955",
          "defaultReferencedItemId": "638249311425155568",
          "isRequired": true
        }
      },
      "CreateTextDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceItemFieldRequest"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "maxLength": 8000,
                "type": "string",
                "description": "Text data source item field value. Max length is 8000 characters.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "text",
          "dataSourceFieldId": 0,
          "value": "Sample text"
        }
      },
      "CreateTextFieldSchemaRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateDataSourceFieldSchemaRequest"
          },
          {
            "type": "object",
            "properties": {
              "isMultipleLines": {
                "type": "boolean",
                "description": "Whether the field is multiple lines. If true, the field will be rendered as a text area."
              },
              "defaultValue": {
                "type": "string",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "name": "History",
          "type": "text",
          "isMultipleLines": true,
          "defaultValue": "The city was established in the year 1652 by Dutch explorers...",
          "isRequired": false
        }
      },
      "DataSource": {
        "required": [
          "fields",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique data source identifier.",
            "format": "int64"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Data source name. It must be unique."
          },
          "description": {
            "type": "string",
            "description": "Data source description.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/NumberFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/ReferenceFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/ImageFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/LanguageFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/FontFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/ColorThemeFieldSchema"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "example": {
          "id": "638247997499047080",
          "name": "Cities",
          "description": "Cities in which we have offices",
          "fields": [
            {
              "id": 0,
              "name": "Name",
              "type": "text",
              "isRequired": true,
              "isLocked": true,
              "isMultipleLines": false
            },
            {
              "id": 1,
              "name": "History",
              "type": "text",
              "isRequired": false,
              "isLocked": false,
              "isMultipleLines": true,
              "defaultValue": "The city was established in the year 1652 by Dutch explorers..."
            },
            {
              "id": 2,
              "name": "Population",
              "type": "number",
              "isRequired": true,
              "isLocked": false,
              "defaultValue": 100222
            },
            {
              "id": 3,
              "name": "Country",
              "type": "reference",
              "isRequired": true,
              "isLocked": false,
              "defaultValue": "638247997437572266",
              "referenceDataSourceId": "638247997437572264"
            },
            {
              "id": 4,
              "name": "Flag",
              "type": "image",
              "isRequired": false,
              "isLocked": false
            },
            {
              "id": 5,
              "name": "PreferredLanguage",
              "type": "language",
              "isRequired": false,
              "isLocked": false,
              "defaultValue": "German"
            },
            {
              "id": 6,
              "name": "PreferredFont",
              "type": "font",
              "isRequired": false,
              "isLocked": false
            },
            {
              "id": 7,
              "name": "PreferredColourTheme",
              "type": "colorTheme",
              "isRequired": false,
              "isLocked": false
            }
          ]
        }
      },
      "DataSourceColorThemeItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "xmlValue": {
                "type": "string",
                "description": "The value of the field based on the schema http://schemas.openxmlformats.org/drawingml/2006/main.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 5,
          "type": "colorTheme",
          "xmlValue": "<a:clrScheme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Templafy_New\"><a:dk1><a:srgbClr val=\"0078FF\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"000000\"/></a:dk2><a:lt2><a:srgbClr val=\"E5E5E5\"/></a:lt2><a:accent1><a:srgbClr val=\"0078FF\"/></a:accent1><a:accent2><a:srgbClr val=\"575757\"/></a:accent2><a:accent3><a:srgbClr val=\"12AA96\"/></a:accent3><a:accent4><a:srgbClr val=\"15436B\"/></a:accent4><a:accent5><a:srgbClr val=\"D44849\"/></a:accent5><a:accent6><a:srgbClr val=\"7F7F7F\"/></a:accent6><a:hlink><a:srgbClr val=\"0078FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"55CBFF\"/></a:folHlink></a:clrScheme>"
        }
      },
      "DataSourceFieldSchema": {
        "required": [
          "id",
          "isLocked",
          "isRequired",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Data source field schema type.",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Unique data source field schema identifier",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Data source field schema name. It must be unique within the data source.",
            "readOnly": true
          },
          "isLocked": {
            "type": "boolean",
            "description": "Value indicating whether data source schema is locked. If true, the field cannot be deleted or modified.",
            "readOnly": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether the field is required. If true, the field must be filled in when creating a data source item.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Text": "#/components/schemas/TextFieldSchema",
            "Number": "#/components/schemas/NumberFieldSchema",
            "Reference": "#/components/schemas/ReferenceFieldSchema",
            "Image": "#/components/schemas/ImageFieldSchema",
            "Language": "#/components/schemas/LanguageFieldSchema",
            "Font": "#/components/schemas/FontFieldSchema",
            "ColorTheme": "#/components/schemas/ColorThemeFieldSchema"
          }
        }
      },
      "DataSourceFontItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "fileName": {
                "type": "string",
                "description": "Font item field file name.",
                "nullable": true
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "format": "uri",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 3,
          "type": "font",
          "fileName": "best-font",
          "fileUrl": "https://allfonts.com/best-font"
        }
      },
      "DataSourceImageItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "fileName": {
                "type": "string",
                "description": "The name of the file.",
                "nullable": true
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "format": "uri",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 2,
          "type": "image",
          "fileName": "Cat",
          "fileUrl": "https://en.wikipedia.org/wiki/Cat#/media/File:Cat_August_2010-4.jpg"
        }
      },
      "DataSourceItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique data source item identifier.",
            "format": "int64"
          },
          "fields": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DataSourceTextItemField"
                },
                {
                  "$ref": "#/components/schemas/DataSourceNumberItemField"
                },
                {
                  "$ref": "#/components/schemas/DataSourceReferenceItemField"
                },
                {
                  "$ref": "#/components/schemas/DataSourceImageItemField"
                },
                {
                  "$ref": "#/components/schemas/DataSourceLanguageItemField"
                },
                {
                  "$ref": "#/components/schemas/DataSourceFontItemField"
                },
                {
                  "$ref": "#/components/schemas/DataSourceColorThemeItemField"
                }
              ]
            },
            "description": "The fields of the data source item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "id": 638247997470215700,
          "fields": [
            {
              "type": "text",
              "dataSourceFieldId": 0,
              "value": "Sample text"
            },
            {
              "type": "number",
              "dataSourceFieldId": 1,
              "value": 123.4
            },
            {
              "type": "reference",
              "dataSourceFieldId": 2,
              "value": "638248473165588903"
            },
            {
              "type": "image",
              "dataSourceFieldId": 3,
              "fileName": "Cat",
              "fileUrl": "https://en.wikipedia.org/wiki/Cat#/media/File:Cat_August_2010-4.jpg"
            },
            {
              "type": "font",
              "dataSourceFieldId": 4,
              "fileName": "best-font",
              "fileUrl": "https://allfonts.com/best-font"
            },
            {
              "type": "colorTheme",
              "dataSourceFieldId": 5,
              "xmlValue": "<a:clrScheme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Templafy_New\"><a:dk1><a:srgbClr val=\"0078FF\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"000000\"/></a:dk2><a:lt2><a:srgbClr val=\"E5E5E5\"/></a:lt2><a:accent1><a:srgbClr val=\"0078FF\"/></a:accent1><a:accent2><a:srgbClr val=\"575757\"/></a:accent2><a:accent3><a:srgbClr val=\"12AA96\"/></a:accent3><a:accent4><a:srgbClr val=\"15436B\"/></a:accent4><a:accent5><a:srgbClr val=\"D44849\"/></a:accent5><a:accent6><a:srgbClr val=\"7F7F7F\"/></a:accent6><a:hlink><a:srgbClr val=\"0078FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"55CBFF\"/></a:folHlink></a:clrScheme>"
            },
            {
              "type": "language",
              "dataSourceFieldId": 6,
              "cultureName": "en-GB"
            }
          ]
        }
      },
      "DataSourceItemField": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Data source item field type.",
            "nullable": true,
            "readOnly": true
          },
          "dataSourceFieldId": {
            "type": "integer",
            "description": "Unique data source field identifier.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Text": "#/components/schemas/DataSourceTextItemField",
            "Number": "#/components/schemas/DataSourceNumberItemField",
            "Reference": "#/components/schemas/DataSourceReferenceItemField",
            "Image": "#/components/schemas/DataSourceImageItemField",
            "Language": "#/components/schemas/DataSourceLanguageItemField",
            "Font": "#/components/schemas/DataSourceFontItemField",
            "ColorTheme": "#/components/schemas/DataSourceColorThemeItemField"
          }
        }
      },
      "DataSourceLanguageItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "cultureName": {
                "type": "string",
                "description": "Language item field culture name.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 6,
          "type": "language",
          "cultureName": "en-GB"
        }
      },
      "DataSourceNumberItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value of the field with the precision of 2 decimal places.",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 1,
          "type": "number",
          "value": 123.45
        }
      },
      "DataSourceObjectLockedProblemDetails": {
        "type": "object",
        "properties": {
          "lockReason": {
            "$ref": "#/components/schemas/LockReason"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The reason the resource is locked with an optional array of dependencies. Dependencies array is populated only when lockedReason is hardDependency and contains a maximum of 50 items per sourceEntityType",
        "example": {
          "title": "Locked",
          "detail": "The data source item cannot be deleted because it has been used by another resource.",
          "status": 423,
          "traceId": "d61f7ce-cccb-4e5b-8727-3b68a61a0559",
          "lockReason": "hardDependency",
          "dependencies": [
            {
              "sourceEntityType": "dataSourceItem",
              "sourceEntityId": "1031936131644784655",
              "description": "There is a dependency from 'DataSourceItem'."
            }
          ]
        }
      },
      "DataSourceReferenceItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceItemId": {
                "type": "integer",
                "description": "The identifier of the data source item to be referenced.",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 4,
          "type": "reference",
          "dataSourceItemId": "638247997437572264"
        }
      },
      "DataSourceTextItemField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceItemField"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Text data source item field value.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 0,
          "type": "text",
          "value": "Sample text"
        }
      },
      "Dependency": {
        "type": "object",
        "properties": {
          "sourceEntityType": {
            "$ref": "#/components/schemas/SourceEntityType"
          },
          "sourceEntityId": {
            "type": "string",
            "description": "The id of the dependency source.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Human readable description of the source type.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model describing a dependency."
      },
      "FontFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 5,
          "name": "PreferredFont",
          "type": "font",
          "isRequired": false,
          "isLocked": false
        }
      },
      "ImageFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 2,
          "name": "Logo",
          "type": "image",
          "isRequired": false,
          "isLocked": false
        }
      },
      "LanguageFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "string",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 4,
          "name": "PreferredLanguage",
          "type": "language",
          "isRequired": false,
          "isLocked": false,
          "defaultValue": "German"
        }
      },
      "LockReason": {
        "enum": [
          "hardDependency",
          "restrictedAccess"
        ],
        "type": "string",
        "description": "The reason the resource is locked. It is either because the resource is depended upon by another resource or the resource has restricted access and cannot be modified."
      },
      "NumberFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "number",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "format": "double",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 1,
          "name": "NumberOfOffices",
          "type": "number",
          "isRequired": true,
          "isLocked": false,
          "defaultValue": 1
        }
      },
      "PatchColorThemeDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatchDataSourceItemFieldRequest"
          },
          {
            "required": [
              "xmlValue"
            ],
            "type": "object",
            "properties": {
              "xmlValue": {
                "maxLength": 3500,
                "minLength": 1,
                "type": "string",
                "description": "The value of the field based on the schema http://schemas.openxmlformats.org/drawingml/2006/main. Max length is 3500 characters."
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 5,
          "type": "colorTheme",
          "xmlValue": "<a:clrScheme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Templafy_New\"><a:dk1><a:srgbClr val=\"0078FF\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"000000\"/></a:dk2><a:lt2><a:srgbClr val=\"E5E5E5\"/></a:lt2><a:accent1><a:srgbClr val=\"0078FF\"/></a:accent1><a:accent2><a:srgbClr val=\"575757\"/></a:accent2><a:accent3><a:srgbClr val=\"12AA96\"/></a:accent3><a:accent4><a:srgbClr val=\"15436B\"/></a:accent4><a:accent5><a:srgbClr val=\"D44849\"/></a:accent5><a:accent6><a:srgbClr val=\"7F7F7F\"/></a:accent6><a:hlink><a:srgbClr val=\"0078FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"55CBFF\"/></a:folHlink></a:clrScheme>"
        }
      },
      "PatchDataSourceFieldRequest": {
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "pattern": "^[A-Z][a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "The name of the field. It must be unique within the data source.",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether the field is required. If true, the field must be filled in when creating a data source item.",
            "nullable": true
          },
          "isMultipleLines": {
            "type": "boolean",
            "description": "Whether the field is multiple lines. If true, the field will be rendered as a text area.",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "name": "Population",
          "isRequired": true,
          "defaultValue": 130000
        }
      },
      "PatchDataSourceItemFieldRequest": {
        "required": [
          "dataSourceFieldId",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Data source item field type.",
            "readOnly": true
          },
          "dataSourceFieldId": {
            "type": "integer",
            "description": "The identifier of the field to be updated.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Text": "#/components/schemas/PatchTextDataSourceItemFieldRequest",
            "Number": "#/components/schemas/PatchNumberDataSourceItemFieldRequest",
            "Image": "#/components/schemas/PatchImageDataSourceItemFieldRequest",
            "Reference": "#/components/schemas/PatchReferenceDataSourceItemFieldRequest",
            "Font": "#/components/schemas/PatchFontDataSourceItemFieldRequest",
            "ColorTheme": "#/components/schemas/PatchColorThemeDataSourceItemFieldRequest"
          }
        }
      },
      "PatchDataSourceItemRequest": {
        "required": [
          "fields"
        ],
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PatchTextDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/PatchNumberDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/PatchImageDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/PatchReferenceDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/PatchFontDataSourceItemFieldRequest"
                },
                {
                  "$ref": "#/components/schemas/PatchColorThemeDataSourceItemFieldRequest"
                }
              ]
            },
            "description": "The fields of the data source item."
          }
        },
        "additionalProperties": false
      },
      "PatchFontDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatchDataSourceItemFieldRequest"
          },
          {
            "required": [
              "fileName"
            ],
            "type": "object",
            "properties": {
              "fileName": {
                "minLength": 1,
                "type": "string",
                "description": "The name of the file."
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "format": "uri",
                "nullable": true
              },
              "content": {
                "type": "string",
                "description": "The base64 content size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 3,
          "type": "font",
          "fileName": "best-font",
          "fileUrl": "https://allfonts.com/best-font"
        }
      },
      "PatchImageDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatchDataSourceItemFieldRequest"
          },
          {
            "required": [
              "fileName"
            ],
            "type": "object",
            "properties": {
              "fileName": {
                "minLength": 1,
                "type": "string",
                "description": "The name of the file."
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "format": "uri",
                "nullable": true
              },
              "content": {
                "type": "string",
                "description": "The base64 content size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 2,
          "type": "image",
          "fileName": "Cat",
          "fileUrl": "https://en.wikipedia.org/wiki/Cat#/media/File:Cat_August_2010-4.jpg"
        }
      },
      "PatchNumberDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatchDataSourceItemFieldRequest"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value of the field with the precision of 2 decimal places.",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 1,
          "type": "number",
          "value": 123.45
        }
      },
      "PatchReferenceDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatchDataSourceItemFieldRequest"
          },
          {
            "required": [
              "dataSourceItemId"
            ],
            "type": "object",
            "properties": {
              "dataSourceItemId": {
                "type": "integer",
                "description": "The identifier of the data source item to be referenced.",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 4,
          "type": "reference",
          "dataSourceItemId": "638247997437572264"
        }
      },
      "PatchTextDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatchDataSourceItemFieldRequest"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "maxLength": 8000,
                "type": "string",
                "description": "Text data source item field value. Max length is 8000 characters.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "dataSourceFieldId": 0,
          "type": "text",
          "value": "An updated value"
        }
      },
      "ReferenceFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "required": [
              "referenceDataSourceId"
            ],
            "type": "object",
            "properties": {
              "referenceDataSourceId": {
                "type": "integer",
                "description": "The id of the data source that the field references.",
                "format": "int64"
              },
              "defaultValue": {
                "type": "integer",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "format": "int64",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 3,
          "name": "Region",
          "type": "reference",
          "isRequired": true,
          "isLocked": false,
          "defaultValue": "638247997437572266",
          "referenceDataSourceId": "638247997437572264"
        }
      },
      "SourceEntityType": {
        "enum": [
          "dataSource",
          "dataSourceItem",
          "other"
        ],
        "type": "string"
      },
      "TextFieldSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourceFieldSchema"
          },
          {
            "required": [
              "isMultipleLines"
            ],
            "type": "object",
            "properties": {
              "isMultipleLines": {
                "type": "boolean",
                "description": "Whether the field is multiple lines. If true, the field will be rendered as a text area."
              },
              "defaultValue": {
                "type": "string",
                "description": "The default value of the field. If specified, the field will be pre-filled with this value when creating a data source item.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "id": 1,
          "name": "History",
          "type": "text",
          "isRequired": true,
          "isLocked": false,
          "isMultipleLines": false,
          "defaultValue": "The city was established in the year 1652 by Dutch explorers..."
        }
      },
      "UpdateColorThemeDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "xmlValue"
            ],
            "type": "object",
            "properties": {
              "xmlValue": {
                "maxLength": 3500,
                "minLength": 1,
                "type": "string",
                "description": "The value of the field based on the schema http://schemas.openxmlformats.org/drawingml/2006/main. Max length is 3500 characters."
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "colorTheme",
          "xmlValue": "<a:clrScheme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Templafy_New\"><a:dk1><a:srgbClr val=\"0078FF\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"000000\"/></a:dk2><a:lt2><a:srgbClr val=\"E5E5E5\"/></a:lt2><a:accent1><a:srgbClr val=\"0078FF\"/></a:accent1><a:accent2><a:srgbClr val=\"575757\"/></a:accent2><a:accent3><a:srgbClr val=\"12AA96\"/></a:accent3><a:accent4><a:srgbClr val=\"15436B\"/></a:accent4><a:accent5><a:srgbClr val=\"D44849\"/></a:accent5><a:accent6><a:srgbClr val=\"7F7F7F\"/></a:accent6><a:hlink><a:srgbClr val=\"0078FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"55CBFF\"/></a:folHlink></a:clrScheme>"
        }
      },
      "UpdateDataSourceItemFieldRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Data source item field type.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Text": "#/components/schemas/UpdateTextDataSourceItemFieldRequest",
            "Number": "#/components/schemas/UpdateNumberDataSourceItemFieldRequest",
            "ColorTheme": "#/components/schemas/UpdateColorThemeDataSourceItemFieldRequest",
            "Reference": "#/components/schemas/UpdateReferenceDataSourceItemFieldRequest",
            "Image": "#/components/schemas/UpdateImageDataSourceItemFieldRequest",
            "Font": "#/components/schemas/UpdateFontDataSourceItemFieldRequest"
          }
        },
        "example": {
          "type": "text",
          "value": "An updated value"
        }
      },
      "UpdateDataSourceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Data source description. If null, description will be removed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "description": "This is an updated description"
        }
      },
      "UpdateFontDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "fileName"
            ],
            "type": "object",
            "properties": {
              "fileName": {
                "minLength": 1,
                "type": "string",
                "description": "The name of the file."
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "format": "uri",
                "nullable": true
              },
              "content": {
                "type": "string",
                "description": "The base64 content size must be under 2MB, and it should be in one of these formats: .ttf, .otf.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "font",
          "fileName": "best-font",
          "fileUrl": "https://allfonts.com/best-font"
        }
      },
      "UpdateImageDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "fileName"
            ],
            "type": "object",
            "properties": {
              "fileName": {
                "minLength": 1,
                "type": "string",
                "description": "The name of the file."
              },
              "fileUrl": {
                "type": "string",
                "description": "The file size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "format": "uri",
                "nullable": true
              },
              "content": {
                "type": "string",
                "description": "The base64 content size must be under 2MB, and it should be in one of these formats: .png, .jpg, .jpeg, .gif, .bmp, .emf, .wmf, .svg.",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "image",
          "fileName": "Cat",
          "fileUrl": "https://en.wikipedia.org/wiki/Cat#/media/File:Cat_August_2010-4.jpg"
        }
      },
      "UpdateNumberDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value of the field with the precision of 2 decimal places.",
                "format": "double"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "number",
          "value": 123.45
        }
      },
      "UpdateReferenceDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "dataSourceItemId"
            ],
            "type": "object",
            "properties": {
              "dataSourceItemId": {
                "type": "integer",
                "description": "The identifier of the data source item to be referenced.",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "reference",
          "dataSourceItemId": "638247997437572264"
        }
      },
      "UpdateTextDataSourceItemFieldRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateDataSourceItemFieldRequest"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "maxLength": 8000,
                "minLength": 1,
                "type": "string",
                "description": "Text data source item field value. Max length is 8000 characters."
              }
            },
            "additionalProperties": false
          }
        ],
        "example": {
          "type": "text",
          "value": "An updated value"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key"
      }
    }
  }
}